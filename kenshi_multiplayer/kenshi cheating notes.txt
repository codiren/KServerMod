kenshi_GOG_x64.exe+62B537 - function call to create stats
kenshi_GOG_x64.exe+62E910 - function to make char?
kenshi_GOG_x64.exe+582587 - before calling to make char




vtable = kenshi_GOG_x64.exe+16FB998

on char creation kenshi.exe+5CBC70 

callout kenshi.exe+582587 // THIS IS 99% IT, update: fk
call kenshi.exe+62E93A 

// before standalone and data creation kenshi.exe+581EFC 
// before triple conditional kenshi.exe+581E61 
// quad conditional kenshi.exe+581D74
// double idk kenshi.exe+58195D  
// after check spawning confirmed kenshi.exe+58195D 
// check if spawn not confirmed kenshi.exe+58163B 
// before master function kenshi.exe+58304E 



kenshi_GOG_x64.exe+64C4D0 

kenshi_GOG_x64.exe+79D8EA 


==steps for RTTI class name
step 1 search string .?AV and pick one you like
step 2 search for that address-0x10
step 3 if result-0xC ~= 1(byte) then discard
step 4 search for remaining address+8
step 5 profit


packet sniffer and editor (like WPE)
get all chars old //kenshi_GOG_x64.exe+14431F
code that gives current limb health pointer(+40 red damage or +44 grey)(class HealthPartStatus)//useless
kenshi_GOG_x64.exe+530576



setpaused(bool) - 48 89 5C 24 08 48 89 74 24 10 57 48 83 EC 50 0F29 74 24 40 F3 0F10 B1 00070000











kenshi_GOG_x64.exe+16C2F68          //non writable
faction ids:
holy nation outlaws 42022-rebirth.mod
shek kingdom 11624-Dialogue (10).mod
nameless 204-gamedata.base
player 1 10-multiplayr.mod
player 2 12-multiplayr.mod








local addressList = getAddressList()

for i = 0, addressList.Count - 1 do
    local entry = addressList[i]  -- Get the entry at index i

    entry.Address = entry.Description.."+16"
end



--broken
local addressList = getAddressList()
local found = false
for i = 0, addressList.Count - 1 do
    local entry = addressList[i]  -- Get the entry at index i

    if (entry.Value == "000000011FB3B660") then
       print("yes",i)
       found = true
       else
       entry.destroy()
       --print("no")
    end

end
print(found and "yay")
print((not found) and "nop")

pause on specific value https://gregstoll.com/~gregstoll/floattohex/

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"OgreMain_x64.dll"+29EB2) 
label(returnhere)
label(originalcode)
label(exit)
label(edit)

newmem: //this is allocated memory, you have read,write,execute access
cmp eax, 0xc746a12f
je edit
jmp originalcode

edit:
mov eax, 0xc7473800

originalcode:
mov [rcx],eax
mov eax,[rdx+04]

exit:
jmp returnhere

"OgreMain_x64.dll"+29EB2:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"OgreMain_x64.dll"+29EB2:
db 89 01 8B 42 04
//mov [rcx],eax
//mov eax,[rdx+04]


kenshi.exe+58255F - mov r10,[r13+00]
kenshi.exe+582563 - lea r9,[r12+30] // quatern
kenshi.exe+582568 - lea r8,[r12+20] // vector 3
kenshi.exe+58256D - mov [rsp+30],r15 //Faction
kenshi.exe+582572 - mov [rsp+28],rbx //ActivePlatoon(needs checking)
kenshi.exe+582577 - mov rax,[r12+48] // this useless?
kenshi.exe+58257C - mov [rsp+20],rax //GameSaveState
kenshi.exe+582581 - mov rdx,r14 //GameDataCopyStandalone
kenshi.exe+582584 - mov rcx,r13 // Character
kenshi.exe+582587 - call qword ptr [r10+00000378]

virtual bool giveBirth(GameDataCopyStandalone*, const Ogre::Vector3&, const Ogre::Quaternion&, GameSaveState*, ActivePlatoon*, Faction*)

1st parameter: rcx (already contains this pointer, i.e., the Character*).
2nd parameter: rdx (passed in the rdx register, i.e., GameDataCopyStandalone*).
3rd parameter: r8 (passed in the r8 register, i.e., const Ogre::Vector3&).
4th parameter: r9 (passed in the r9 register, i.e., const Ogre::Quaternion&).
5th parameter: The next parameter will go onto the stack (i.e., GameSaveState*).
6th parameter: The next parameter will go onto the stack (i.e., ActivePlatoon*).
7th parameter: The next parameter will go onto the stack (i.e., Faction*).

current obj + 6 args


kenshi_GOG_x64.exe+76A170 


alloc(newmem,2048)
alloc(vector3, 12)
alloc(quaternion, 16)
vector3:
dd (float)-50978.80078
dd (float)3000
dd (float)2932.476562
quaternion:
dd (float)1
dd (float)0
dd (float)0
dd (float)0

newmem:
  sub rsp,28

mov rcx, 765742A0  //CharacterHuman (not used i hope(hopium))
mov rdx, 7659C000  //GameDataCopyStandalone    created kenshi.exe+58205C 
mov r8, 010FE420//lea r8, [vector3]    //vector3
mov r9, 010FE430//lea r9, [quaternion] //Quaternion    //00B9E740
mov r15, 40651D70  //Faction
mov [rsp+30],r15     
mov rbx, 7653B260  //ActivePlatoon
mov [rsp+28],rbx     
mov rax, 0           //GameSaveState
mov [rsp+20],rax     

call kenshi.exe+62E910 //

  add rsp,28
  xor eax,eax
  ret

createthread(newmem)
dealloc(newmem)
=======================
alloc(newmem,2048)

newmem:
  sub rsp,28

call kenshi.exe+3D2D5

  add rsp,28
  xor eax,eax
  ret

createthread(newmem)
dealloc(newmem)






bring all peeps here:=================================================================
local scan = createMemScan()

scan.firstScan(soExactValue, vtQword, rtRounded, "7ff61810b998", '', 0, 0xFFFFFFFFFFFFFFFF, "*W*X*C", fsmNotAligned, '1', true, true, false, true)
scan.waitTillDone()

local foundList = createFoundList(scan)
foundList.initialize()

if foundList.Count == 0 then
  print("No addresses found with the value: 7ff61810b998")
  return
end

for i = 1, foundList.Count do
  local baseAddress = tonumber(foundList[i-1], 16) -- Convert address to number

  local offsetAddress = baseAddress + 0x320

  local dereferencedAddress = readPointer(offsetAddress)

  if dereferencedAddress == nil or dereferencedAddress == 0 then
    print("Failed to dereference address: " .. string.format("%X", offsetAddress))
    goto continue
  end

  writeFloat(dereferencedAddress + 0x20, -5096.947754)
  writeFloat(dereferencedAddress + 0x24, 152.7362671)
  writeFloat(dereferencedAddress + 0x28, 297.7177429)

  print("Modified values at address: " .. string.format("%X", dereferencedAddress))

  ::continue::
end
foundList.deinitialize()
scan.destroy()




get all classes mvsc:=========================================
s=createMemScan()

s.firstScan(soExactValue, vtString, rtRounded, '.?AV', '', 0 ,0xffffffffffffffff ,"*W*X*C" ,fsmNotAligned ,'1' ,false ,true, false, true);
s.waitTillDone()

fl=createFoundList(s)

names={}
fl.initialize()

printf("fl.count=%d",fl.count)

sll=createStringList()
for i=1,fl.Count do
  local a=tonumber(fl[i-1],16)

  if inModule(a) then
    --figure out which module
    local as=getNameFromAddress(a,true,false,false)
    local moduleend=1
    while true do
      local newend=as:find('%+',moduleend+1)
      if newend==nil then break end
      moduleend=newend
    end

    as=as:sub(1,moduleend-1)
    local ne={}
    ne={}
    ne.name=readString(tonumber(fl[i-1],16)+4)
    ne.address=a-0x10
    ne.modulename=as:sub(1,moduleend-1)
    ne.modulebase=getAddress(ne.modulename)
    ne.moduleend=ne.modulebase+getModuleSize(ne.modulename)
    table.insert(names,ne)
    sll.add(ne.name)
  end
end

r,selstring=showSelectionList('RTTI Classes','Select the class to find instances of',sll)
if (r==-1) then return end
sll.destroy()

printf("You picked %d: %s in module %s (%x-%x)", r+1,selstring, names[r+1].modulename,names[r+1].modulebase,names[r+1].moduleend)
mstart=names[r+1].modulebase
mstop=names[r+1].moduleend

a=names[r+1].address
if targetIs64Bit() then
  a=a-mstart
end



fl.deinitialize()
--print(string.format("Scanning for %x", a))
s.newScan()
s.firstScan(soExactValue, vtDword, rtRounded, string.format("%x",a), '', mstart ,mstop ,"*W*X*C" ,fsmNotAligned ,'1' ,true ,true, false, true);
s.waitTillDone()
fl.initialize()
--print("found "..fl.Count.." results")

RTTIInfo={}
for i=1,fl.Count do
  local a=tonumber(fl[i-1],16)
  a=a-12
  if readBytes(a,1)==1 then
    table.insert(RTTIInfo,a)
  end
end

--print("after checking only "..#RTTIInfo.." left")

if targetIs64Bit() then
  scantype=vtQword
  pointersize=8
else
  scantype=vtDword
  pointersize=4
end

vtables={}

for i=1,#RTTIInfo do
  a=RTTIInfo[i]
  fl.deinitialize()
  --print(string.format("Scanning for %x", a))
  s.newScan()
  s.firstScan(soExactValue, scantype, rtRounded, string.format("%x",a), '', mstart ,mstop ,"*W*X*C" ,fsmNotAligned ,'1' ,true ,true, false, true);
  s.waitTillDone()
  fl.initialize()

  for j=1,fl.Count do
    table.insert(vtables, tonumber(fl[j-1],16)+pointersize)
  end
end

--print(#vtables.." vtables found")

--scan instances

instances={}

for i=1,#vtables do
  a=vtables[i]
  fl.deinitialize()
  print(string.format("Scanning for %x", a))
  s.newScan()
  s.firstScan(soExactValue, scantype, rtRounded, string.format("%x",a), '', 0 ,0xffffffffffffffff ,"*W*X*C" ,fsmNotAligned ,'1' ,true ,true, false, true);
  s.waitTillDone()
  fl.initialize()

  for j=1,fl.Count do
    table.insert(instances, tonumber(fl[j-1],16))
  end
end

print("The following instances of the class "..selstring.." where found")
for i=1,#instances do
  print(string.format("%x",instances[i]))
end 